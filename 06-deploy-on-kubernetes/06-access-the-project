
Accessing Frontend Proxy Using Ingress
======================================

1. Removing Load Balancer Service
---------------------------------
- Verify that the Load Balancer Service is removed.
- Command:
  ```  kubectl edit svc opentelemetry-demo-frontend-proxy
  ```
  - Change `type: LoadBalancer` to `type: NodePort`.
- Reason: Load balancers cost money. Revert when not needed.

2. Creating an Ingress Resource
-------------------------------
- Navigate to Kubernetes folder:
  ```  cd Ultimate-DevOps-Project-Demo/kubernetes/frontend-proxy
  ```
- Create a new file `ingress.yaml` alongside `deployment.yaml` and `service.yaml`.

3. Writing the Ingress Resource YAML
------------------------------------
- Basic structure:
  ```  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: frontend-proxy
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
  spec:
    ingressClassName: alb
    rules:
    - host: example.com
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: opentelemetry-demo-frontend-proxy
              port:
                number: 8080
  ```

4. Applying the Ingress Resource
--------------------------------
- Apply with:
  ```  kubectl apply -f ingress.  kubectl get ingress
  ```
- Expect a Load Balancer address after a few seconds.

5. Troubleshooting Ingress Issues
---------------------------------
- View logs:
  ```  kubectl get pods -n kube-system
  kubectl logs -n kube-system <ingress-controller-pod-name>
  ```

6. Testing Ingress with a Dummy Domain
--------------------------------------
- Map dummy domain (`example.com`) locally:
  - On Mac/Linux:
    ```    sudo nano /etc/hosts
    ```
  - On Windows:
   
    C:\Windows\System32\drivers\etc\hosts
    ```
  - Add:
    `
    <Load Balancer IP> example.com
    ```

7. Testing the Frontend Access
------------------------------
- Visit: `http://example.com` in browser.

Key Takeaways
-------------
- ✅ Used Ingress for frontend proxy access.
- ✅ Configured host-based routing.
- ✅ Verified Load Balancer & DNS.

Using a Real Domain for Kubernetes Ingress
==========================================

1. How to Get a Real Domain
---------------------------
- Domains are bought by IT/Security teams.
- Providers: GoDaddy, Hostinger, Google Domains, Namecheap.
- Choose cheap extensions: `.shop`, `.online`, `.xyz`.

3. Steps to Buy a Domain
------------------------
1. Search domain on provider.
2. Choose affordable domain.
3. Checkout without extras.
4. Complete purchase.

4. Free vs Paid Domains
-----------------------
- Free domains may be unreliable.
- Paid (~$1/year) domains recommended.

5. Next Steps
-------------
- Map domain to AWS Load Balancer using Route 53.

Connecting a Domain to AWS Load Balancer Using Route 53
========================================================

1. Recap
--------
- Domain purchased from GoDaddy.
- Use AWS Route 53 for DNS.

2. AWS Route 53 Introduction
----------------------------
- Hosted Zones define how domain DNS queries are handled.

3. Setup Route 53
-----------------
- Create Hosted Zone for domain.
- Add `Alias` record for www.domain to ALB.
- Routing Policy: Simple Routing.

4. Update Name Servers in GoDaddy
---------------------------------
- Copy NS from Route 53.
- Update GoDaddy domain settings.

5. Summary
----------
- ✅ Created Route 53 Hosted Zone.
- ✅ Mapped domain to Load Balancer.
- ✅ Updated GoDaddy NS records.

Why Route 53 is Better
======================
- Alias records auto-adjust to ALB DNS.
- GoDaddy DNS does not support CNAME at root.
- Route 53 handles dynamic IPs.

DNS and Ingress Setup for 
==========================

1. DNS Configuration
--------------------
- Replace GoDaddy NS with Route 53 NS.

2. Update Ingress Hostname
---------------------------
- Update `host` in `ingress.yaml`:
  ```  host: domain name
- Apply changes:
  ```  kubectl apply -f ingress.  ```

3. Verify Update
----------------
- Check logs:
  ```  kubectl get pods -n kube-system
  kubectl logs -n kube-system <ingress-controller-pod-name>
  ```

Accessing the Project Using Custom Domain
=========================================

1. DNS Propagation
------------------
- Can take 2–48 hours.

2. Verifying DNS Setup
----------------------
- Use `https://www.whatsmydns.net/`
- Or run:
  ```  nslookup yourdomain.com
  ```

3. Load Balancer and Ingress Configuration
------------------------------------------
- Verify LB rules and host header: `/`, `yourdomain.com`.

4. Final Check with cURL
------------------------
  ```  curl --resolve yourdomain.com:80:<IP> yourdomain.com
  ```

5. Local DNS Cache Check
-------------------------
  ```  nslookup yourdomain.com
  ```

6. Recap
--------
- Domain from GoDaddy.
- Route 53 hosted zone.
- Updated Ingress with domain.
- Verified with curl/browser.

7. Final Ingress Correction
---------------------------
- If using www subdomain, update Ingress:
  ```  host: yourdomain.com
  ```
  ```  kubectl apply -f ingress.  ```

- ✅ Custom domain is now live and resolves correctly.
