
Kubernetes Deployment Notes
===========================

1. Introduction
---------------
Before deploying applications on Amazon EKS, it's important to understand two core Kubernetes resources:

- **Deployment**: Ensures pods are scalable, self-healing, and declaratively managed.
- **Service**: Provides stable network access to ephemeral pods.

Kubernetes addresses key container challenges:

- **Ephemeral containers**: Pod IPs change on restart, breaking communication.
- **Scaling**: Automatically increases/decreases pods based on demand.
- **Healing**: Automatically replaces failed pods to maintain desired state.
- **Service Discovery**: Allows reliable communication between services using service names and DNS.

---

2. Scaling and Healing in Kubernetes
------------------------------------
**Problem with Standalone Containers**:
- Do not restart automatically unless configured.
- No built-in scaling or load balancing.

**Kubernetes Solution – Deployments**:
- Automatically **restart** failed pods (self-healing).
- Use **Horizontal Pod Autoscalers** for auto-scaling based on metrics like CPU.
- Maintain availability and consistent replicas with **ReplicaSet**.

---

3. How Deployments Work
-----------------------
- **Pods** are managed by a **ReplicaSet**, which is managed by a **Deployment**.
- A Deployment ensures:
  - Desired number of replicas.
  - Auto-recovery if a pod fails.
  - Rollbacks and rolling updates.

**Example Scaling Scenario**:
| Traffic Scenario           | Desired Pod Count |
|---------------------------|-------------------|
| Normal Load (10 req/sec)  | 1 pod             |
| High Load (40 req/sec)    | 4 pods            |
| Low Load (5 req/sec)      | 1 pod             |

---

4. Deployment YAML Overview
---------------------------
A typical `Deployment.yaml` includes:

- **apiVersion**: apps/v1
- **kind**: Deployment
- **metadata**: Name, labels
- **spec**:
  - `replicas`: Number of pods
  - `selector`: Label selector
  - `template`:
    - `metadata.labels`: Required for service discovery
    - `spec`:
      - `serviceAccountName`: Custom service account for access control
      - `containers`: Image, name, ports, env variables
      - `volumes` (optional)

Example:
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      serviceAccountName: my-app-sa
      containers:
        - name: my-app-container
          image: my-app:latest
          ports:
            - containerPort: 80


Deployment Best Practices
=========================

Labels
------
- In Deployment metadata: Used for management and organization.
- In Pod spec (spec.template.metadata.labels): Critical for service discovery.

Service Accounts
----------------
- Always specify `serviceAccountName` to avoid falling back to the default.
- Required when pods need elevated permissions or interact with the Kubernetes API (RBAC).

Environment Variables
---------------------
- Typically provided by developers.
- Used to configure:
  - Service endpoints (URLs for internal/external APIs)
  - Observability/monitoring tools
  - Backend communication (e.g., DB credentials, auth tokens)

Manifest Tips
-------------
- YAML files can be long and repetitive—focus only on key differences:
  - Image name
  - Ports
  - Environment variables
  - Volume mounts (if any)

Working with Multi-Service Projects
===================================
- For large projects with multiple microservices, use this structure:

  └── microservice-x/
      ├── deployment.yaml
      └── service.yaml

- Alternatively, use a single combined manifest file:

  `complete_deploy.yaml` – includes all deployments and services.

Deploy using:
-------------
kubectl apply -f complete_deploy.yaml

Summary
=======
- Deployments are the primary resource for managing pods in Kubernetes.
- Provide:
  - Auto-scaling
  - Self-healing
  - Declarative pod management
- When combined with Services and Service Accounts, Deployments support secure, reliable, and scalable microservice deployment in EKS.
