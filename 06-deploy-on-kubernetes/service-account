Service Accounts in Kubernetes
==============================

1. Introduction
---------------
- When deploying applications in Kubernetes, service accounts are often overlooked.
- In production or enterprise setups, assigning a service account to each pod is critical.
- Whether you're using Deployments, StatefulSets, or DaemonSets, service accounts provide scoped, secure access to cluster resources.

2. What is a Service Account?
-----------------------------
Comparison: User Account vs. Service Account

| Feature            | User Account                          | Service Account                       |
|--------------------|----------------------------------------|----------------------------------------|
| Who uses it?       | Humans (DevOps, Developers)           | Services (Pods, Applications)          |
| Purpose            | Access to Kubernetes cluster via CLI  | Grant permissions to workloads         |
| Authentication     | Uses kubeconfig with kubectl          | Uses token auto-mounted into pod       |
| Permissions        | Managed via RBAC roles                | Also managed via RBAC roles            |

3. Default Service Account in Kubernetes
----------------------------------------
- Every namespace has a default service account.
- If a pod is deployed without specifying one, the default is used.
- It has minimal permissions, mostly suitable for running isolated workloads.
- To list service accounts:
  - `kubectl get sa -n <namespace>`
  - `kubectl get sa -n kube-system` (for system-level accounts)

4. Why Do Pods Need a Service Account?
--------------------------------------
- A pod often needs to interact with the Kubernetes API server.
- Use cases include:
  - Fetching ConfigMaps or Secrets
  - Accessing metrics or triggering other controllers
  - Webhooks, admission controllers, etc.

| Scenario                                   | Required Permissions                     |
|-------------------------------------------|-------------------------------------------|
| Running a pod                              | Default service account (basic access)    |
| Accessing ConfigMaps, Secrets, Kubernetes API | Requires custom Role + RoleBinding       |

5. Steps to Create and Assign a Service Account
-----------------------------------------------

Step 1: Create the Service Account

kubectl create sa my-app-sa -n default

Step 2: Create a Role with Required Permissions

Create a file called `role-configmap-reader.yaml`:

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: configmap-reader
  namespace: default
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "watch", "list"]
---

Apply the role:

kubectl apply -f role-configmap-reader.yaml

Step 3: Bind the Role to the Service Account

Create a file called `rolebinding-configmap-reader.yaml`:

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-configmaps-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: my-app-sa
  namespace: default
roleRef:
  kind: Role
  name: configmap-reader
  apiGroup: rbac.authorization.k8s.io
---

Apply the role binding:

kubectl apply -f rolebinding-configmap-reader.yaml

Step 4: Assign the Service Account in the Pod or Deployment

In your Deployment YAML, include this under `spec`:

serviceAccountName: my-app-sa

Example:

spec:
  serviceAccountName: my-app-sa
  containers:
  - name: app
    image: nginx

Apply the Deployment:

kubectl apply -f my-deployment.yaml

Step 5: Verify Assignment

Check which service account is used:

kubectl get pod <pod-name> -o jsonpath="{.spec.serviceAccountName}"

Expected output:

my-app-sa

6. Comparison with AWS IAM Roles
--------------------------------
- Kubernetes service accounts and RBAC are conceptually similar to IAM in AWS.

| AWS Concept  | Kubernetes Equivalent         |
|--------------|-------------------------------|
| IAM User     | User Account                  |
| IAM Role     | Service Account               |
| IAM Policy   | Role / ClusterRole            |
| Role Binding | RoleBinding / ClusterRoleBinding |

7. Summary
----------
- Always assign a dedicated service account to your pods in production.
- Use RBAC (Role-Based Access Control) to limit permissions to the principle of least privilege.
- Kubernetes service accounts help isolate, audit, and secure access from applications to the API server.
- The process is similar in concept to AWS IAM: define a principal, attach permissions, and bind the access.


